// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name CXCommonKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import CXCommonKit
import Foundation
import SnapKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CXAdScrollView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var HSpace: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var placeholderImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol CXItemProtocol {
  var ItemName: Swift.String { get set }
  var ItemId: Swift.Int { get set }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CXTagsView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var HSpace: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var VSpace: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var FontSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var titleColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var itemBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat?
  @_Concurrency.MainActor(unsafe) public var lineColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var items: [CXCommonKit.CXItemProtocol]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var TagsClick: ((CXCommonKit.CXItemProtocol) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension UIKit.UIImage {
  convenience public init?(name: Swift.String)
}
public enum CXPagePointType {
  case dot
  case square
  case number
  case custom
  public static func == (a: CXCommonKit.CXPagePointType, b: CXCommonKit.CXPagePointType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CXPagePointAlignment {
  case left
  case right
  case center
  public static func == (a: CXCommonKit.CXPagePointAlignment, b: CXCommonKit.CXPagePointAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CXPagePointView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var totalPages: Swift.Int
  @_Concurrency.MainActor(unsafe) public var pointType: CXCommonKit.CXPagePointType
  @_Concurrency.MainActor(unsafe) public var pointAlignment: CXCommonKit.CXPagePointAlignment
  @_Concurrency.MainActor(unsafe) public var space: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var selectColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var unselectColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var selectTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var unselectTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var selectImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var unselectImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var HSpace: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var BottomSpace: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var currentPage: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension CXCommonKit.CXPagePointView {
  @_Concurrency.MainActor(unsafe) public func reloadPageView()
  @_Concurrency.MainActor(unsafe) public func updateColor(index: Swift.Int)
}
public class CXAleartConfig {
  public init()
  public var TitleFontSize: CoreFoundation.CGFloat
  public var DescFontSize: CoreFoundation.CGFloat
  public var TitleColor: UIKit.UIColor
  public var DescColor: UIKit.UIColor
  public var lineSpace: CoreFoundation.CGFloat
  public var corneradius: CoreFoundation.CGFloat
  public var placeHolderString: Swift.String
  @objc deinit
}
public enum CXAleartEnum {
  case Action
  case Input
  case Custom
  public static func == (a: CXCommonKit.CXAleartEnum, b: CXCommonKit.CXAleartEnum) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CXAleartView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var doneBtn: UIKit.UIButton?
  @_Concurrency.MainActor(unsafe) public var cancelBtn: UIKit.UIButton?
  @_Concurrency.MainActor(unsafe) public var maxWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var ActionComplete: ((Swift.Int, Swift.String?) -> Swift.Void)?
  @available(*, unavailable, renamed: "init(title:desc:)")
  @_Concurrency.MainActor(unsafe) @objc override convenience dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String = "", desc: Swift.String = "")
  @_Concurrency.MainActor(unsafe) public init(_ AleartType: CXCommonKit.CXAleartEnum = .Action, buttons: [CXCommonKit.CXButtons] = [], title: Swift.String = "", desc: Swift.String = "", cancelBtn: UIKit.UIButton? = nil, doneBtn: UIKit.UIButton? = nil, config: CXCommonKit.CXAleartConfig = CXAleartConfig())
  @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) public func dismiss()
  @objc deinit
}
public enum CXTools {
  public static func CreateImageWithColor(color: UIKit.UIColor) -> UIKit.UIImage?
  public static func ChangeImageToGrayImage(oldImage: UIKit.UIImage?) -> UIKit.UIImage?
  public static func ChangeColorToGrayColor(color: UIKit.UIColor) -> UIKit.UIColor
}
public struct CXButtons {
  public var title: Swift.String
  public var color: UIKit.UIColor
  public var fontSize: CoreFoundation.CGFloat
  public var ActionId: Swift.Int
}
extension CXCommonKit.CXPagePointType : Swift.Equatable {}
extension CXCommonKit.CXPagePointType : Swift.Hashable {}
extension CXCommonKit.CXPagePointAlignment : Swift.Equatable {}
extension CXCommonKit.CXPagePointAlignment : Swift.Hashable {}
extension CXCommonKit.CXAleartEnum : Swift.Equatable {}
extension CXCommonKit.CXAleartEnum : Swift.Hashable {}
